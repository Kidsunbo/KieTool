/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ToolService_H
#define ToolService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "tool_types.h"

namespace KieShop { namespace tool {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ToolServiceIf {
 public:
  virtual ~ToolServiceIf() {}
  virtual void getShardingKey(ShardingKeyResponse& _return, const ShardingKeyRequest& req) = 0;
  virtual void getSnowFlake(SnowFlakeResponse& _return, const SnowFlakeRequest& req) = 0;
};

class ToolServiceIfFactory {
 public:
  typedef ToolServiceIf Handler;

  virtual ~ToolServiceIfFactory() {}

  virtual ToolServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ToolServiceIf* /* handler */) = 0;
};

class ToolServiceIfSingletonFactory : virtual public ToolServiceIfFactory {
 public:
  ToolServiceIfSingletonFactory(const ::std::shared_ptr<ToolServiceIf>& iface) : iface_(iface) {}
  virtual ~ToolServiceIfSingletonFactory() {}

  virtual ToolServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ToolServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ToolServiceIf> iface_;
};

class ToolServiceNull : virtual public ToolServiceIf {
 public:
  virtual ~ToolServiceNull() {}
  void getShardingKey(ShardingKeyResponse& /* _return */, const ShardingKeyRequest& /* req */) {
    return;
  }
  void getSnowFlake(SnowFlakeResponse& /* _return */, const SnowFlakeRequest& /* req */) {
    return;
  }
};

typedef struct _ToolService_getShardingKey_args__isset {
  _ToolService_getShardingKey_args__isset() : req(false) {}
  bool req :1;
} _ToolService_getShardingKey_args__isset;

class ToolService_getShardingKey_args {
 public:

  ToolService_getShardingKey_args(const ToolService_getShardingKey_args&);
  ToolService_getShardingKey_args& operator=(const ToolService_getShardingKey_args&);
  ToolService_getShardingKey_args() {
  }

  virtual ~ToolService_getShardingKey_args() noexcept;
  ShardingKeyRequest req;

  _ToolService_getShardingKey_args__isset __isset;

  void __set_req(const ShardingKeyRequest& val);

  bool operator == (const ToolService_getShardingKey_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ToolService_getShardingKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToolService_getShardingKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ToolService_getShardingKey_pargs {
 public:


  virtual ~ToolService_getShardingKey_pargs() noexcept;
  const ShardingKeyRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToolService_getShardingKey_result__isset {
  _ToolService_getShardingKey_result__isset() : success(false) {}
  bool success :1;
} _ToolService_getShardingKey_result__isset;

class ToolService_getShardingKey_result {
 public:

  ToolService_getShardingKey_result(const ToolService_getShardingKey_result&);
  ToolService_getShardingKey_result& operator=(const ToolService_getShardingKey_result&);
  ToolService_getShardingKey_result() {
  }

  virtual ~ToolService_getShardingKey_result() noexcept;
  ShardingKeyResponse success;

  _ToolService_getShardingKey_result__isset __isset;

  void __set_success(const ShardingKeyResponse& val);

  bool operator == (const ToolService_getShardingKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ToolService_getShardingKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToolService_getShardingKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToolService_getShardingKey_presult__isset {
  _ToolService_getShardingKey_presult__isset() : success(false) {}
  bool success :1;
} _ToolService_getShardingKey_presult__isset;

class ToolService_getShardingKey_presult {
 public:


  virtual ~ToolService_getShardingKey_presult() noexcept;
  ShardingKeyResponse* success;

  _ToolService_getShardingKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ToolService_getSnowFlake_args__isset {
  _ToolService_getSnowFlake_args__isset() : req(false) {}
  bool req :1;
} _ToolService_getSnowFlake_args__isset;

class ToolService_getSnowFlake_args {
 public:

  ToolService_getSnowFlake_args(const ToolService_getSnowFlake_args&);
  ToolService_getSnowFlake_args& operator=(const ToolService_getSnowFlake_args&);
  ToolService_getSnowFlake_args() {
  }

  virtual ~ToolService_getSnowFlake_args() noexcept;
  SnowFlakeRequest req;

  _ToolService_getSnowFlake_args__isset __isset;

  void __set_req(const SnowFlakeRequest& val);

  bool operator == (const ToolService_getSnowFlake_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ToolService_getSnowFlake_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToolService_getSnowFlake_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ToolService_getSnowFlake_pargs {
 public:


  virtual ~ToolService_getSnowFlake_pargs() noexcept;
  const SnowFlakeRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToolService_getSnowFlake_result__isset {
  _ToolService_getSnowFlake_result__isset() : success(false) {}
  bool success :1;
} _ToolService_getSnowFlake_result__isset;

class ToolService_getSnowFlake_result {
 public:

  ToolService_getSnowFlake_result(const ToolService_getSnowFlake_result&);
  ToolService_getSnowFlake_result& operator=(const ToolService_getSnowFlake_result&);
  ToolService_getSnowFlake_result() {
  }

  virtual ~ToolService_getSnowFlake_result() noexcept;
  SnowFlakeResponse success;

  _ToolService_getSnowFlake_result__isset __isset;

  void __set_success(const SnowFlakeResponse& val);

  bool operator == (const ToolService_getSnowFlake_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ToolService_getSnowFlake_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToolService_getSnowFlake_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToolService_getSnowFlake_presult__isset {
  _ToolService_getSnowFlake_presult__isset() : success(false) {}
  bool success :1;
} _ToolService_getSnowFlake_presult__isset;

class ToolService_getSnowFlake_presult {
 public:


  virtual ~ToolService_getSnowFlake_presult() noexcept;
  SnowFlakeResponse* success;

  _ToolService_getSnowFlake_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ToolServiceClient : virtual public ToolServiceIf {
 public:
  ToolServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ToolServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getShardingKey(ShardingKeyResponse& _return, const ShardingKeyRequest& req);
  void send_getShardingKey(const ShardingKeyRequest& req);
  void recv_getShardingKey(ShardingKeyResponse& _return);
  void getSnowFlake(SnowFlakeResponse& _return, const SnowFlakeRequest& req);
  void send_getSnowFlake(const SnowFlakeRequest& req);
  void recv_getSnowFlake(SnowFlakeResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ToolServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ToolServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ToolServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getShardingKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSnowFlake(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ToolServiceProcessor(::std::shared_ptr<ToolServiceIf> iface) :
    iface_(iface) {
    processMap_["getShardingKey"] = &ToolServiceProcessor::process_getShardingKey;
    processMap_["getSnowFlake"] = &ToolServiceProcessor::process_getSnowFlake;
  }

  virtual ~ToolServiceProcessor() {}
};

class ToolServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ToolServiceProcessorFactory(const ::std::shared_ptr< ToolServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ToolServiceIfFactory > handlerFactory_;
};

class ToolServiceMultiface : virtual public ToolServiceIf {
 public:
  ToolServiceMultiface(std::vector<std::shared_ptr<ToolServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ToolServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ToolServiceIf> > ifaces_;
  ToolServiceMultiface() {}
  void add(::std::shared_ptr<ToolServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getShardingKey(ShardingKeyResponse& _return, const ShardingKeyRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getShardingKey(_return, req);
    }
    ifaces_[i]->getShardingKey(_return, req);
    return;
  }

  void getSnowFlake(SnowFlakeResponse& _return, const SnowFlakeRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSnowFlake(_return, req);
    }
    ifaces_[i]->getSnowFlake(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ToolServiceConcurrentClient : virtual public ToolServiceIf {
 public:
  ToolServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ToolServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getShardingKey(ShardingKeyResponse& _return, const ShardingKeyRequest& req);
  int32_t send_getShardingKey(const ShardingKeyRequest& req);
  void recv_getShardingKey(ShardingKeyResponse& _return, const int32_t seqid);
  void getSnowFlake(SnowFlakeResponse& _return, const SnowFlakeRequest& req);
  int32_t send_getSnowFlake(const SnowFlakeRequest& req);
  void recv_getSnowFlake(SnowFlakeResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
