/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "base_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace base {

int _kStatusCodeValues[] = {
  StatusCode::Success,
  StatusCode::Fail
};
const char* _kStatusCodeNames[] = {
  "Success",
  "Fail"
};
const std::map<int, const char*> _StatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStatusCodeValues, _kStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StatusCode::type& val) {
  std::map<int, const char*>::const_iterator it = _StatusCode_VALUES_TO_NAMES.find(val);
  if (it != _StatusCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const StatusCode::type& val) {
  std::map<int, const char*>::const_iterator it = _StatusCode_VALUES_TO_NAMES.find(val);
  if (it != _StatusCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Base::~Base() noexcept {
}


void Base::__set_logId(const std::string& val) {
  this->logId = val;
}

void Base::__set_caller(const std::string& val) {
  this->caller = val;
}

void Base::__set_callerIp(const std::string& val) {
  this->callerIp = val;
}

void Base::__set_data(const std::map<std::string, std::string> & val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const Base& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Base::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logId);
          this->__isset.logId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->caller);
          this->__isset.caller = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callerIp);
          this->__isset.callerIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->data[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Base");

  xfer += oprot->writeFieldBegin("logId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->logId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("caller", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->caller);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callerIp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->callerIp);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->data.size()));
      std::map<std::string, std::string> ::const_iterator _iter7;
      for (_iter7 = this->data.begin(); _iter7 != this->data.end(); ++_iter7)
      {
        xfer += oprot->writeString(_iter7->first);
        xfer += oprot->writeString(_iter7->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Base &a, Base &b) {
  using ::std::swap;
  swap(a.logId, b.logId);
  swap(a.caller, b.caller);
  swap(a.callerIp, b.callerIp);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

Base::Base(const Base& other8) {
  logId = other8.logId;
  caller = other8.caller;
  callerIp = other8.callerIp;
  data = other8.data;
  __isset = other8.__isset;
}
Base& Base::operator=(const Base& other9) {
  logId = other9.logId;
  caller = other9.caller;
  callerIp = other9.callerIp;
  data = other9.data;
  __isset = other9.__isset;
  return *this;
}
void Base::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Base(";
  out << "logId=" << to_string(logId);
  out << ", " << "caller=" << to_string(caller);
  out << ", " << "callerIp=" << to_string(callerIp);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


BaseResp::~BaseResp() noexcept {
}


void BaseResp::__set_statusCode(const StatusCode::type val) {
  this->statusCode = val;
}

void BaseResp::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void BaseResp::__set_data(const std::map<std::string, std::string> & val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const BaseResp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BaseResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->statusCode = (StatusCode::type)ecast10;
          this->__isset.statusCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _ktype12;
            ::apache::thrift::protocol::TType _vtype13;
            xfer += iprot->readMapBegin(_ktype12, _vtype13, _size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              std::string _key16;
              xfer += iprot->readString(_key16);
              std::string& _val17 = this->data[_key16];
              xfer += iprot->readString(_val17);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BaseResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BaseResp");

  xfer += oprot->writeFieldBegin("statusCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->statusCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->data.size()));
      std::map<std::string, std::string> ::const_iterator _iter18;
      for (_iter18 = this->data.begin(); _iter18 != this->data.end(); ++_iter18)
      {
        xfer += oprot->writeString(_iter18->first);
        xfer += oprot->writeString(_iter18->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BaseResp &a, BaseResp &b) {
  using ::std::swap;
  swap(a.statusCode, b.statusCode);
  swap(a.statusMessage, b.statusMessage);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

BaseResp::BaseResp(const BaseResp& other19) {
  statusCode = other19.statusCode;
  statusMessage = other19.statusMessage;
  data = other19.data;
  __isset = other19.__isset;
}
BaseResp& BaseResp::operator=(const BaseResp& other20) {
  statusCode = other20.statusCode;
  statusMessage = other20.statusMessage;
  data = other20.data;
  __isset = other20.__isset;
  return *this;
}
void BaseResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BaseResp(";
  out << "statusCode=" << to_string(statusCode);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}

} // namespace
