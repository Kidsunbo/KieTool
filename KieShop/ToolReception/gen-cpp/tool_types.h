/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tool_TYPES_H
#define tool_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "base_types.h"


namespace KieShop { namespace tool {

class ShardingKeyRequest;

class ShardingKeyItem;

class ShardingKeyResponse;

typedef struct _ShardingKeyRequest__isset {
  _ShardingKeyRequest__isset() : id(false), base(false) {}
  bool id :1;
  bool base :1;
} _ShardingKeyRequest__isset;

class ShardingKeyRequest : public virtual ::apache::thrift::TBase {
 public:

  ShardingKeyRequest(const ShardingKeyRequest&);
  ShardingKeyRequest& operator=(const ShardingKeyRequest&);
  ShardingKeyRequest() : id() {
  }

  virtual ~ShardingKeyRequest() noexcept;
  std::string id;
   ::base::Base base;

  _ShardingKeyRequest__isset __isset;

  void __set_id(const std::string& val);

  void __set_base(const  ::base::Base& val);

  bool operator == (const ShardingKeyRequest & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ShardingKeyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardingKeyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShardingKeyRequest &a, ShardingKeyRequest &b);

std::ostream& operator<<(std::ostream& out, const ShardingKeyRequest& obj);

typedef struct _ShardingKeyItem__isset {
  _ShardingKeyItem__isset() : shardingKey(false), isNew(false), serverId(false), timestamp(false), counter(false) {}
  bool shardingKey :1;
  bool isNew :1;
  bool serverId :1;
  bool timestamp :1;
  bool counter :1;
} _ShardingKeyItem__isset;

class ShardingKeyItem : public virtual ::apache::thrift::TBase {
 public:

  ShardingKeyItem(const ShardingKeyItem&);
  ShardingKeyItem& operator=(const ShardingKeyItem&);
  ShardingKeyItem() : shardingKey(0), isNew(0), serverId(0), timestamp(0), counter(0) {
  }

  virtual ~ShardingKeyItem() noexcept;
  int32_t shardingKey;
  bool isNew;
  int32_t serverId;
  int32_t timestamp;
  int32_t counter;

  _ShardingKeyItem__isset __isset;

  void __set_shardingKey(const int32_t val);

  void __set_isNew(const bool val);

  void __set_serverId(const int32_t val);

  void __set_timestamp(const int32_t val);

  void __set_counter(const int32_t val);

  bool operator == (const ShardingKeyItem & rhs) const
  {
    if (!(shardingKey == rhs.shardingKey))
      return false;
    if (!(isNew == rhs.isNew))
      return false;
    if (!(serverId == rhs.serverId))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(counter == rhs.counter))
      return false;
    return true;
  }
  bool operator != (const ShardingKeyItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardingKeyItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShardingKeyItem &a, ShardingKeyItem &b);

std::ostream& operator<<(std::ostream& out, const ShardingKeyItem& obj);

typedef struct _ShardingKeyResponse__isset {
  _ShardingKeyResponse__isset() : orderId(false), userId(false), shopId(false), baseResp(false) {}
  bool orderId :1;
  bool userId :1;
  bool shopId :1;
  bool baseResp :1;
} _ShardingKeyResponse__isset;

class ShardingKeyResponse : public virtual ::apache::thrift::TBase {
 public:

  ShardingKeyResponse(const ShardingKeyResponse&);
  ShardingKeyResponse& operator=(const ShardingKeyResponse&);
  ShardingKeyResponse() {
  }

  virtual ~ShardingKeyResponse() noexcept;
  ShardingKeyItem orderId;
  ShardingKeyItem userId;
  ShardingKeyItem shopId;
   ::base::BaseResp baseResp;

  _ShardingKeyResponse__isset __isset;

  void __set_orderId(const ShardingKeyItem& val);

  void __set_userId(const ShardingKeyItem& val);

  void __set_shopId(const ShardingKeyItem& val);

  void __set_baseResp(const  ::base::BaseResp& val);

  bool operator == (const ShardingKeyResponse & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(shopId == rhs.shopId))
      return false;
    if (!(baseResp == rhs.baseResp))
      return false;
    return true;
  }
  bool operator != (const ShardingKeyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardingKeyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShardingKeyResponse &a, ShardingKeyResponse &b);

std::ostream& operator<<(std::ostream& out, const ShardingKeyResponse& obj);

}} // namespace

#endif
