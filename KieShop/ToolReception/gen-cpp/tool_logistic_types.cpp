/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tool_logistic_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace KieShop { namespace tool_logistic {


ShardingKeyRequest::~ShardingKeyRequest() noexcept {
}


void ShardingKeyRequest::__set_id(const std::string& val) {
  this->id = val;
}

void ShardingKeyRequest::__set_base(const  ::base::Base& val) {
  this->base = val;
}
std::ostream& operator<<(std::ostream& out, const ShardingKeyRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShardingKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 255:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->base.read(iprot);
          this->__isset.base = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShardingKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShardingKeyRequest");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base", ::apache::thrift::protocol::T_STRUCT, 255);
  xfer += this->base.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShardingKeyRequest &a, ShardingKeyRequest &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.base, b.base);
  swap(a.__isset, b.__isset);
}

ShardingKeyRequest::ShardingKeyRequest(const ShardingKeyRequest& other0) {
  id = other0.id;
  base = other0.base;
  __isset = other0.__isset;
}
ShardingKeyRequest& ShardingKeyRequest::operator=(const ShardingKeyRequest& other1) {
  id = other1.id;
  base = other1.base;
  __isset = other1.__isset;
  return *this;
}
void ShardingKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShardingKeyRequest(";
  out << "id=" << to_string(id);
  out << ", " << "base=" << to_string(base);
  out << ")";
}


ShardingKeyItem::~ShardingKeyItem() noexcept {
}


void ShardingKeyItem::__set_shardingKey(const int32_t val) {
  this->shardingKey = val;
}

void ShardingKeyItem::__set_isNew(const bool val) {
  this->isNew = val;
}

void ShardingKeyItem::__set_serverId(const int32_t val) {
  this->serverId = val;
}

void ShardingKeyItem::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

void ShardingKeyItem::__set_counter(const int32_t val) {
  this->counter = val;
}
std::ostream& operator<<(std::ostream& out, const ShardingKeyItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShardingKeyItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shardingKey);
          this->__isset.shardingKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isNew);
          this->__isset.isNew = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serverId);
          this->__isset.serverId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->counter);
          this->__isset.counter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShardingKeyItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShardingKeyItem");

  xfer += oprot->writeFieldBegin("shardingKey", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->shardingKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isNew", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isNew);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->serverId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->counter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShardingKeyItem &a, ShardingKeyItem &b) {
  using ::std::swap;
  swap(a.shardingKey, b.shardingKey);
  swap(a.isNew, b.isNew);
  swap(a.serverId, b.serverId);
  swap(a.timestamp, b.timestamp);
  swap(a.counter, b.counter);
  swap(a.__isset, b.__isset);
}

ShardingKeyItem::ShardingKeyItem(const ShardingKeyItem& other2) {
  shardingKey = other2.shardingKey;
  isNew = other2.isNew;
  serverId = other2.serverId;
  timestamp = other2.timestamp;
  counter = other2.counter;
  __isset = other2.__isset;
}
ShardingKeyItem& ShardingKeyItem::operator=(const ShardingKeyItem& other3) {
  shardingKey = other3.shardingKey;
  isNew = other3.isNew;
  serverId = other3.serverId;
  timestamp = other3.timestamp;
  counter = other3.counter;
  __isset = other3.__isset;
  return *this;
}
void ShardingKeyItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShardingKeyItem(";
  out << "shardingKey=" << to_string(shardingKey);
  out << ", " << "isNew=" << to_string(isNew);
  out << ", " << "serverId=" << to_string(serverId);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "counter=" << to_string(counter);
  out << ")";
}


ShardingKeyResponse::~ShardingKeyResponse() noexcept {
}


void ShardingKeyResponse::__set_orderId(const ShardingKeyItem& val) {
  this->orderId = val;
}

void ShardingKeyResponse::__set_userId(const ShardingKeyItem& val) {
  this->userId = val;
}

void ShardingKeyResponse::__set_shopId(const ShardingKeyItem& val) {
  this->shopId = val;
}

void ShardingKeyResponse::__set_baseResp(const  ::base::BaseResp& val) {
  this->baseResp = val;
}
std::ostream& operator<<(std::ostream& out, const ShardingKeyResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShardingKeyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->orderId.read(iprot);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userId.read(iprot);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->shopId.read(iprot);
          this->__isset.shopId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 255:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baseResp.read(iprot);
          this->__isset.baseResp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShardingKeyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShardingKeyResponse");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->orderId.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->userId.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shopId", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->shopId.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baseResp", ::apache::thrift::protocol::T_STRUCT, 255);
  xfer += this->baseResp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShardingKeyResponse &a, ShardingKeyResponse &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.userId, b.userId);
  swap(a.shopId, b.shopId);
  swap(a.baseResp, b.baseResp);
  swap(a.__isset, b.__isset);
}

ShardingKeyResponse::ShardingKeyResponse(const ShardingKeyResponse& other4) {
  orderId = other4.orderId;
  userId = other4.userId;
  shopId = other4.shopId;
  baseResp = other4.baseResp;
  __isset = other4.__isset;
}
ShardingKeyResponse& ShardingKeyResponse::operator=(const ShardingKeyResponse& other5) {
  orderId = other5.orderId;
  userId = other5.userId;
  shopId = other5.shopId;
  baseResp = other5.baseResp;
  __isset = other5.__isset;
  return *this;
}
void ShardingKeyResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShardingKeyResponse(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "shopId=" << to_string(shopId);
  out << ", " << "baseResp=" << to_string(baseResp);
  out << ")";
}


SnowFlakeRequest::~SnowFlakeRequest() noexcept {
}


void SnowFlakeRequest::__set_base(const  ::base::Base& val) {
  this->base = val;
}
std::ostream& operator<<(std::ostream& out, const SnowFlakeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnowFlakeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->base.read(iprot);
          this->__isset.base = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnowFlakeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnowFlakeRequest");

  xfer += oprot->writeFieldBegin("base", ::apache::thrift::protocol::T_STRUCT, 255);
  xfer += this->base.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnowFlakeRequest &a, SnowFlakeRequest &b) {
  using ::std::swap;
  swap(a.base, b.base);
  swap(a.__isset, b.__isset);
}

SnowFlakeRequest::SnowFlakeRequest(const SnowFlakeRequest& other6) {
  base = other6.base;
  __isset = other6.__isset;
}
SnowFlakeRequest& SnowFlakeRequest::operator=(const SnowFlakeRequest& other7) {
  base = other7.base;
  __isset = other7.__isset;
  return *this;
}
void SnowFlakeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnowFlakeRequest(";
  out << "base=" << to_string(base);
  out << ")";
}


SnowFlakeResponse::~SnowFlakeResponse() noexcept {
}


void SnowFlakeResponse::__set_id(const int64_t val) {
  this->id = val;
}

void SnowFlakeResponse::__set_baseResp(const  ::base::BaseResp& val) {
  this->baseResp = val;
}
std::ostream& operator<<(std::ostream& out, const SnowFlakeResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnowFlakeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 255:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baseResp.read(iprot);
          this->__isset.baseResp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnowFlakeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnowFlakeResponse");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baseResp", ::apache::thrift::protocol::T_STRUCT, 255);
  xfer += this->baseResp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnowFlakeResponse &a, SnowFlakeResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.baseResp, b.baseResp);
  swap(a.__isset, b.__isset);
}

SnowFlakeResponse::SnowFlakeResponse(const SnowFlakeResponse& other8) {
  id = other8.id;
  baseResp = other8.baseResp;
  __isset = other8.__isset;
}
SnowFlakeResponse& SnowFlakeResponse::operator=(const SnowFlakeResponse& other9) {
  id = other9.id;
  baseResp = other9.baseResp;
  __isset = other9.__isset;
  return *this;
}
void SnowFlakeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnowFlakeResponse(";
  out << "id=" << to_string(id);
  out << ", " << "baseResp=" << to_string(baseResp);
  out << ")";
}

}} // namespace
