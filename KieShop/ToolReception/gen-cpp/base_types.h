/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef base_TYPES_H
#define base_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace base {

struct StatusCode {
  enum type {
    Success = 0,
    Fail = 1
  };
};

extern const std::map<int, const char*> _StatusCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StatusCode::type& val);

std::string to_string(const StatusCode::type& val);

class Base;

class BaseResp;

typedef struct _Base__isset {
  _Base__isset() : logId(true), caller(true), callerIp(true), data(false) {}
  bool logId :1;
  bool caller :1;
  bool callerIp :1;
  bool data :1;
} _Base__isset;

class Base : public virtual ::apache::thrift::TBase {
 public:

  Base(const Base&);
  Base& operator=(const Base&);
  Base() : logId(""), caller(""), callerIp("") {
  }

  virtual ~Base() noexcept;
  std::string logId;
  std::string caller;
  std::string callerIp;
  std::map<std::string, std::string>  data;

  _Base__isset __isset;

  void __set_logId(const std::string& val);

  void __set_caller(const std::string& val);

  void __set_callerIp(const std::string& val);

  void __set_data(const std::map<std::string, std::string> & val);

  bool operator == (const Base & rhs) const
  {
    if (!(logId == rhs.logId))
      return false;
    if (!(caller == rhs.caller))
      return false;
    if (!(callerIp == rhs.callerIp))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Base &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Base & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Base &a, Base &b);

std::ostream& operator<<(std::ostream& out, const Base& obj);

typedef struct _BaseResp__isset {
  _BaseResp__isset() : statusCode(true), statusMessage(true), data(false) {}
  bool statusCode :1;
  bool statusMessage :1;
  bool data :1;
} _BaseResp__isset;

class BaseResp : public virtual ::apache::thrift::TBase {
 public:

  BaseResp(const BaseResp&);
  BaseResp& operator=(const BaseResp&);
  BaseResp() : statusCode((StatusCode::type)0), statusMessage("") {
    statusCode = (StatusCode::type)0;

  }

  virtual ~BaseResp() noexcept;
  StatusCode::type statusCode;
  std::string statusMessage;
  std::map<std::string, std::string>  data;

  _BaseResp__isset __isset;

  void __set_statusCode(const StatusCode::type val);

  void __set_statusMessage(const std::string& val);

  void __set_data(const std::map<std::string, std::string> & val);

  bool operator == (const BaseResp & rhs) const
  {
    if (!(statusCode == rhs.statusCode))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const BaseResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BaseResp &a, BaseResp &b);

std::ostream& operator<<(std::ostream& out, const BaseResp& obj);

} // namespace

#endif
