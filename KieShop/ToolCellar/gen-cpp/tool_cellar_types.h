/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tool_cellar_TYPES_H
#define tool_cellar_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "base_types.h"


namespace KieShop { namespace tool_cellar {

class RequestLoggingRequest;

class RequestLoggingResponse;

typedef struct _RequestLoggingRequest__isset {
  _RequestLoggingRequest__isset() : requestBody(false), responseBody(false), base(false) {}
  bool requestBody :1;
  bool responseBody :1;
  bool base :1;
} _RequestLoggingRequest__isset;

class RequestLoggingRequest : public virtual ::apache::thrift::TBase {
 public:

  RequestLoggingRequest(const RequestLoggingRequest&);
  RequestLoggingRequest& operator=(const RequestLoggingRequest&);
  RequestLoggingRequest() : requestBody(), responseBody() {
  }

  virtual ~RequestLoggingRequest() noexcept;
  std::string requestBody;
  std::string responseBody;
   ::base::Base base;

  _RequestLoggingRequest__isset __isset;

  void __set_requestBody(const std::string& val);

  void __set_responseBody(const std::string& val);

  void __set_base(const  ::base::Base& val);

  bool operator == (const RequestLoggingRequest & rhs) const
  {
    if (!(requestBody == rhs.requestBody))
      return false;
    if (!(responseBody == rhs.responseBody))
      return false;
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const RequestLoggingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestLoggingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestLoggingRequest &a, RequestLoggingRequest &b);

std::ostream& operator<<(std::ostream& out, const RequestLoggingRequest& obj);

typedef struct _RequestLoggingResponse__isset {
  _RequestLoggingResponse__isset() : baseResp(false) {}
  bool baseResp :1;
} _RequestLoggingResponse__isset;

class RequestLoggingResponse : public virtual ::apache::thrift::TBase {
 public:

  RequestLoggingResponse(const RequestLoggingResponse&);
  RequestLoggingResponse& operator=(const RequestLoggingResponse&);
  RequestLoggingResponse() {
  }

  virtual ~RequestLoggingResponse() noexcept;
   ::base::BaseResp baseResp;

  _RequestLoggingResponse__isset __isset;

  void __set_baseResp(const  ::base::BaseResp& val);

  bool operator == (const RequestLoggingResponse & rhs) const
  {
    if (!(baseResp == rhs.baseResp))
      return false;
    return true;
  }
  bool operator != (const RequestLoggingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestLoggingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestLoggingResponse &a, RequestLoggingResponse &b);

std::ostream& operator<<(std::ostream& out, const RequestLoggingResponse& obj);

}} // namespace

#endif
